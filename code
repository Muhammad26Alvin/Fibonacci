#include <iostream>
#include <vector>
#include <chrono>

long long fibonacci_recursive(int n) {
    if (n <= 1) {
        return n;
    }
    return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2);
}

long long fibonacci_dp(int n) {
    if (n <= 1) {
        return n;
    }
    std::vector<long long> fib(n + 1);
    fib[0] = 0;
    fib[1] = 1;
    for (int i = 2; i <= n; ++i) {
        fib[i] = fib[i - 1] + fib[i - 2];
    }
    return fib[n];
}

void measure_execution_time(int n) {
    auto start = std::chrono::high_resolution_clock::now();
    long long result_recursive = fibonacci_recursive(n);
    auto end = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double, std::micro> duration_recursive = end - start;

    start = std::chrono::high_resolution_clock::now();
    long long result_dp = fibonacci_dp(n);
    end = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double, std::micro> duration_dp = end - start;

    std::cout << "n = " << n << "\n";
    std::cout << "Rekursif: " << duration_recursive.count() << " mikrodetik, hasil: " << result_recursive << "\n";
    std::cout << "Dynamic Programming: " << duration_dp.count() << " mikrodetik, hasil: " << result_dp << "\n\n";
}

int main() {
    std::cout << "Pengukuran waktu eksekusi Fibonacci\n";
    int test_values[] = {10, 25, 30, 40, 50};
    for (int n : test_values) {
        measure_execution_time(n);
    }
    return 0;
}
